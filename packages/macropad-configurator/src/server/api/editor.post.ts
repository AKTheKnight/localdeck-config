import * as fs from "fs/promises";
import newConfig from "@localbytes/macropad-codegen/lib/esphome-macropad";
import {type PadEditor} from "~/lib/PadCfg";
import {getEditorUrl} from "~/lib/utils";
import {ConfiguredButton} from "@localbytes/macropad-codegen/lib/virtuals/configured-button";

export default defineEventHandler(async (event) => {
    const {filesDir} = useRuntimeConfig();
    const {filename} = getQuery(event)
    const body = await readBody(event) satisfies { editor: PadEditor };
    const editor: PadEditor = body?.editor;

    if (!editor) {
        throw createError({
            statusCode: 400,
            statusMessage: "No editor found",
        });
    }

    const path = `${filesDir}/${filename}`;

    let filecontent = "";
    try {
        const search = "changes will be lost!";
        const content = await fs.readFile(path, "utf8");
        let pos = content.indexOf(search);
        if (pos > 0) {
            filecontent = content.substring(0, pos + search.length);
        }
    } catch (e) {
        // ignore
    }

    if (filecontent === "") {
        filecontent += "# This file was generated by the LocalBytes Macropad Configurator\n"

        filecontent += newConfig({
            withDefaults: true,
            stopBeforeCustom: true
        }).config.synthYaml();

        filecontent += "\n# Anything below this line will be removed when saving.\n"
        filecontent += "# To change this, navigate to the LocalBytes Macropad Configurator.\n"
        filecontent += "# Your changes will be lost!"
    }

    filecontent += `\n# Edit: ${getEditorUrl(editor)}\n\n`

    let {config} = newConfig({withDefaults: false});
    editor.buttons.forEach((b) => config.addComponent(new ConfiguredButton(b)));
    filecontent += config.synthYaml();

    await fs.writeFile(path, filecontent, "utf8");
    return {filename, path}
});
